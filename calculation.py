# -*- coding: utf-8 -*-
"""calculation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l--wz3eEN5E6fyMsRYoPrmgwRnz41hbV
"""

# calculation.py
import yfinance as yf
import pandas as pd

# assets.py (or inside calculation.py)
ASSETS = {
    "VNM_Fund": "FUEVFVND.VN",  # Vietnam fund
    "Gold": "GC=F",              # Gold futures
    "Bitcoin": "BTC-USD",        # Crypto
    "Ethereum": "ETH-USD",       # Crypto
    "US_Bond": "IEF"             # US Bond ETF
}


def fetch_prices(period="6mo", interval="1d"):
    tickers = list(ASSETS.values())
    data = yf.download(tickers, period=period, interval=interval, group_by="ticker", auto_adjust=True)

    prices = {}
    for name, ticker in ASSETS.items():
        try:
            # Get latest closing price
            latest_price = data[ticker]["Close"][-1]
            prices[name] = latest_price
        except KeyError:
            prices[name] = None
    return prices

def calculate_trends(prices, previous_prices):
    trends = {}
    for asset, price in prices.items():
        prev_price = previous_prices.get(asset, price)
        pct_change = (price - prev_price) / prev_price * 100
        if pct_change > 5:
            trends[asset] = "Strong uptrend"
        elif pct_change < -5:
            trends[asset] = "Strong downtrend"
        else:
            trends[asset] = "Sideways"
    return trends

def save_results(prices, trends, filename="calculation_results.csv"):
    data = []
    for asset in ASSETS.keys():
        data.append({
            "Asset": asset,
            "Price": prices[asset],
            "Trend": trends[asset]
        })
    df = pd.DataFrame(data)
    df.to_csv(filename, index=False)
    print(f"Results saved to {filename}")

if __name__ == "__main__":
    # Example previous prices (can store last run in a CSV)
    previous_prices = {"VNM_Fund": 100, "Gold": 1800, "Bitcoin": 30000, "Ethereum": 2000, "US_Bond": 100}

    prices = fetch_prices()
    trends = calculate_trends(prices, previous_prices)
    save_results(prices, trends)