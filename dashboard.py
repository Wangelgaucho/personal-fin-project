# -*- coding: utf-8 -*-
"""dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jsik6dki3vX0HGk4lh1VmOeTKjT49Vds
"""

pip install streamlit

import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import plotly.express as px
from pypfopt import EfficientFrontier, risk_models, expected_returns

st.set_page_config(page_title="Smart Portfolio Dashboard", layout="wide")

st.title("ðŸ“Š Smart Portfolio Recommendation Dashboard")

# Sidebar inputs
st.sidebar.header("ðŸ’¼ Portfolio Settings")
tickers_input = st.sidebar.text_input(
    "Enter tickers (comma separated)",
    "FPT.VN, VNM.VN, FUEVFVND.VN, BTC-USD, GC=F"
)
risk_choice = st.sidebar.selectbox(
    "Select your risk preference",
    ["Low", "Medium", "High"]
)

# Convert input into list
tickers = [t.strip() for t in tickers_input.split(",")]

# Download data
st.write("### ðŸ“ˆ Price Data (Last 1 Year)")
data = yf.download(tickers, period="1y")
if "Adj Close" in data.columns:
    data = data["Adj Close"]
else:
    data = data["Close"]


# Calculate expected returns and covariance
mu = expected_returns.mean_historical_return(data)
S = risk_models.sample_cov(data)

# Optimization based on risk level
ef = EfficientFrontier(mu, S)
if risk_choice == "Low":
    weights = ef.min_volatility()
elif risk_choice == "High":
    weights = ef.max_sharpe()
else:
    # For Medium risk, target a volatility. Adjust the target_volatility as needed.
    ef.efficient_risk(target_volatility=0.20)
    weights = ef.clean_weights()

cleaned_weights = ef.clean_weights()

# Show results
st.write("### ðŸ§® Recommended Portfolio Allocation")
alloc_df = pd.DataFrame(cleaned_weights.items(), columns=["Asset", "Weight"])
st.dataframe(alloc_df)

# Pie chart
fig = px.pie(alloc_df, names="Asset", values="Weight", title="Portfolio Allocation (%)")
st.plotly_chart(fig, use_container_width=True)

# Portfolio performance
st.write("### ðŸ“Š Portfolio Performance")
perf = ef.portfolio_performance(verbose=True)
st.write(f"Expected Annual Return: **{perf[0]*100:.2f}%**")
st.write(f"Annual Volatility: **{perf[1]*100:.2f}%**")
st.write(f"Sharpe Ratio: **{perf[2]:.2f}**")

st.success("âœ… Portfolio suggestion generated successfully!")