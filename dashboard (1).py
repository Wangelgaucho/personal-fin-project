# -*- coding: utf-8 -*-
"""dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jsik6dki3vX0HGk4lh1VmOeTKjT49Vds
"""

import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
from pypfopt import expected_returns, risk_models, EfficientFrontier

# ----------------------------
# Title & Description
# ----------------------------
st.set_page_config(page_title="Investment Dashboard", layout="wide")
st.title("ðŸ’° Investment Dashboard - Vietnam & Global Assets")
st.write("Track performance and get portfolio suggestions based on price data.")

# ----------------------------
# User Inputs
# ----------------------------
st.sidebar.header("Select Your Assets")

default_tickers = ["AAPL", "BTC-USD", "GC=F", "VNM"]  # Apple, Bitcoin, Gold, Vietnam ETF
tickers = st.sidebar.text_input(
    "Enter tickers (comma separated):",
    ", ".join(default_tickers)
).replace(" ", "").split(",")

period = st.sidebar.selectbox("Select period:", ["6mo", "1y", "2y", "5y"], index=1)

st.sidebar.write("Example tickers:")
st.sidebar.write("- VN30 ETF: FUEVFVND.VN")
st.sidebar.write("- Bitcoin: BTC-USD")
st.sidebar.write("- Gold: GC=F")
st.sidebar.write("- Apple: AAPL")

# ----------------------------
# Download Price Data
# ----------------------------
st.subheader("ðŸ“ˆ Historical Price Data")

try:
    data = yf.download(tickers, period=period, auto_adjust=True)
    if "Close" in data.columns:
        data = data["Close"]
    elif "Adj Close" in data.columns:
        data = data["Adj Close"]

    # Handle missing values
    data = data.ffill().bfill()

    st.line_chart(data)

except Exception as e:
    st.error(f"Error downloading data: {e}")

# ----------------------------
# Portfolio Optimization
# ----------------------------
st.subheader("ðŸ’¡ Portfolio Allocation Suggestion")

try:
    mu = expected_returns.mean_historical_return(data)
    S = risk_models.sample_cov(data)

    ef = EfficientFrontier(mu, S)
    weights = ef.max_sharpe()
    cleaned_weights = ef.clean_weights()

    st.write("**Optimal Portfolio Allocation (Max Sharpe Ratio):**")
    st.write(cleaned_weights)

    performance = ef.portfolio_performance(verbose=True)
    st.write(f"Expected annual return: {performance[0]*100:.2f}%")
    st.write(f"Annual volatility: {performance[1]*100:.2f}%")
    st.write(f"Sharpe Ratio: {performance[2]:.2f}")

except Exception as e:
    st.warning(f"Could not optimize portfolio: {e}")

# ----------------------------
# Footer
# ----------------------------
st.markdown("---")
st.caption("Created by Vu Manh Dat - Powered by Streamlit, Yahoo Finance & PyPortfolioOpt")
